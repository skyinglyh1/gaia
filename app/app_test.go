package app

import (
	"os"
	"testing"

	"github.com/stretchr/testify/require"
	"github.com/tendermint/tendermint/libs/log"
	"github.com/tendermint/tm-db"

	"github.com/cosmos/cosmos-sdk/codec"
	"github.com/cosmos/cosmos-sdk/simapp"

	"encoding/hex"
	"fmt"
	mcc "github.com/ontio/multi-chain/common"
	mctype "github.com/ontio/multi-chain/core/types"
	abci "github.com/tendermint/tendermint/abci/types"
)

func TestGaiadExport(t *testing.T) {
	db := db.NewMemDB()
	gapp := NewGaiaApp(log.NewTMLogger(log.NewSyncWriter(os.Stdout)), db, nil, true, 0)
	setGenesis(gapp)

	// Making a new app object with the db, so that initchain hasn't been called
	newGapp := NewGaiaApp(log.NewTMLogger(log.NewSyncWriter(os.Stdout)), db, nil, true, 0)
	_, _, err := newGapp.ExportAppStateAndValidators(false, []string{})
	require.NoError(t, err, "ExportAppStateAndValidators should not have an error")
}

// ensure that black listed addresses are properly set in bank keeper
func TestBlackListedAddrs(t *testing.T) {
	db := db.NewMemDB()
	app := NewGaiaApp(log.NewTMLogger(log.NewSyncWriter(os.Stdout)), db, nil, true, 0)

	//for acc := range maccPerms {
	//	require.True(t, app.bankKeeper.BlacklistedAddr(app.supplyKeeper.GetModuleAddress(acc)))
	//}
	mcSerializedBs, _ := hex.DecodeString("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044e3abdca0642b405b23ac481398db8099213c59d7dd4ac979848f420b88ce730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8365b000000001dac2b7c00000000fdaf037b226c6561646572223a343239343936373239352c227672665f76616c7565223a22484a675171706769355248566745716354626e6443456c384d516837446172364e4e646f6f79553051666f67555634764d50675851524171384d6f38373853426a2b38577262676c2b36714d7258686b667a72375751343d222c227672665f70726f6f66223a22785864422b5451454c4c6a59734965305378596474572f442f39542f746e5854624e436667354e62364650596370382f55706a524c572f536a5558643552576b75646632646f4c5267727052474b76305566385a69413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a343239343936373239352c226e65775f636861696e5f636f6e666967223a7b2276657273696f6e223a312c2276696577223a312c226e223a342c2263223a312c22626c6f636b5f6d73675f64656c6179223a31303030303030303030302c22686173685f6d73675f64656c6179223a31303030303030303030302c22706565725f68616e647368616b655f74696d656f7574223a31303030303030303030302c227065657273223a5b7b22696e646578223a312c226964223a2231323035303237613165326539616130626462366538333435633435653962643666333139656636323439396638383638366361663563616239613034616631663131343266227d2c7b22696e646578223a322c226964223a2231323035303234356261346534623033613365396665643737616533356163303065363930613564653464393061343938343666613331666535663135363837373734613338227d2c7b22696e646578223a332c226964223a2231323035303335363435396366653165336636663032626535306637396230306562613934323531323138663162356237653030313231646264653032616139663066363933227d2c7b22696e646578223a342c226964223a2231323035303234346266343036396461333332613138383566353262636161623563643231626336646130643834626333373433613232353666663464633335663566343738227d5d2c22706f735f7461626c65223a5b322c322c332c332c342c332c312c322c332c332c312c342c332c342c312c312c312c312c342c332c322c312c332c322c312c322c332c322c312c322c322c342c332c312c342c342c312c312c322c332c322c332c322c342c322c322c342c322c332c312c342c342c342c342c332c312c342c342c312c335d2c226d61785f626c6f636b5f6368616e67655f76696577223a33307d7d3dc4ba9418037af1730c130f068f4951653070ad0000")
	genesisHeader := new(mctype.Header)
	genesisHeader.Deserialization(mcc.NewZeroCopySource(mcSerializedBs))

	cosmosGenesisHeaderBs := app.cdc.MustMarshalBinaryLengthPrefixed(genesisHeader)
	fmt.Printf("cosmosGenesisHeader hex string is %s\n", hex.EncodeToString(cosmosGenesisHeaderBs))
	//"dc081a200000000000000000000000000000000000000000000000000000000000000000222044e3abdca0642b405b23ac481398db8099213c59d7dd4ac979848f420b88ce732a20000000000000000000000000000000000000000000000000000000000000000032200000000000000000000000000000000000000000000000000000000000000000388090dbd905489dd8aee10752af077b226c6561646572223a343239343936373239352c227672665f76616c7565223a22484a675171706769355248566745716354626e6443456c384d516837446172364e4e646f6f79553051666f67555634764d50675851524171384d6f38373853426a2b38577262676c2b36714d7258686b667a72375751343d222c227672665f70726f6f66223a22785864422b5451454c4c6a59734965305378596474572f442f39542f746e5854624e436667354e62364650596370382f55706a524c572f536a5558643552576b75646632646f4c5267727052474b76305566385a69413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a343239343936373239352c226e65775f636861696e5f636f6e666967223a7b2276657273696f6e223a312c2276696577223a312c226e223a342c2263223a312c22626c6f636b5f6d73675f64656c6179223a31303030303030303030302c22686173685f6d73675f64656c6179223a31303030303030303030302c22706565725f68616e647368616b655f74696d656f7574223a31303030303030303030302c227065657273223a5b7b22696e646578223a312c226964223a2231323035303237613165326539616130626462366538333435633435653962643666333139656636323439396638383638366361663563616239613034616631663131343266227d2c7b22696e646578223a322c226964223a2231323035303234356261346534623033613365396665643737616533356163303065363930613564653464393061343938343666613331666535663135363837373734613338227d2c7b22696e646578223a332c226964223a2231323035303335363435396366653165336636663032626535306637396230306562613934323531323138663162356237653030313231646264653032616139663066363933227d2c7b22696e646578223a342c226964223a2231323035303234346266343036396461333332613138383566353262636161623563643231626336646130643834626333373433613232353666663464633335663566343738227d5d2c22706f735f7461626c65223a5b322c322c332c332c342c332c312c322c332c332c312c342c332c342c312c312c312c312c342c332c322c312c332c322c312c322c332c322c312c322c322c342c332c312c342c342c312c312c322c332c322c332c322c342c322c322c342c322c332c312c342c342c342c342c332c312c342c342c312c335d2c226d61785f626c6f636b5f6368616e67655f76696577223a33307d7d5a143dc4ba9418037af1730c130f068f4951653070ad"
	genesisHeader1 := &mctype.Header{}
	app.cdc.MustUnmarshalBinaryLengthPrefixed(cosmosGenesisHeaderBs, genesisHeader1)
	fmt.Printf("genesisHeader1 is %v\n", *genesisHeader1)
	genesisHeader2 := new(mctype.Header)
	app.cdc.MustUnmarshalBinaryLengthPrefixed(cosmosGenesisHeaderBs, genesisHeader2)
	fmt.Printf("genesisHeader2 is %v\n", *genesisHeader2)

	blockHash := genesisHeader2.Hash()
	headerbs := app.cdc.MustMarshalBinaryLengthPrefixed(genesisHeader2)
	hashbs := app.cdc.MustMarshalBinaryLengthPrefixed(blockHash)
	heightbs := app.cdc.MustMarshalBinaryLengthPrefixed(genesisHeader2.Height)
	fmt.Printf("headerbs is %v\n", hex.EncodeToString(headerbs))
	fmt.Printf("hashbs is %v\n", hex.EncodeToString(hashbs))
	fmt.Printf("heightbs is %v\n", hex.EncodeToString(heightbs))

}

func setGenesis(gapp *GaiaApp) error {

	genesisState := simapp.NewDefaultGenesisState()
	stateBytes, err := codec.MarshalJSONIndent(gapp.cdc, genesisState)
	if err != nil {
		return err
	}

	// Initialize the chain
	gapp.InitChain(
		abci.RequestInitChain{
			Validators:    []abci.ValidatorUpdate{},
			AppStateBytes: stateBytes,
		},
	)
	gapp.Commit()
	return nil
}
